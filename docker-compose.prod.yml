version: "3"
services:
  nginx:
    restart: always
    image: nginx:alpine
    volumes:
      - static_files:/etc/nginx/html
      - ./nginx/prod.conf:/etc/nginx/conf.d/default.conf
      - /etc/certbot/conf:/etc/letsencrypt
      - /etc/certbot/www:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
      - api
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''

  certbot:
    image: certbot/certbot
    volumes:
      - /etc/certbot/conf:/etc/letsencrypt
      - /etc/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  web:
    build: ./client
    restart: always
    volumes:
      - static_files:/app/dist
    depends_on:
      - api
    command: ["sh", "-c", "yarn build && sleep infinity"]

  api:
    image: hackernews-clone_server
    restart: always
    build: ./server
    expose:
      - "4000"
    depends_on:
      - db
    command: ["sh", "-c", "yarn initDB && yarn serve"]

  refresh-server:
    image: hackernews-clone_server
    restart: always
    expose:
      - "3000"
    depends_on:
      - api
    # yarn generate, initialize prisma client
    command: ["sh", "-c", "yarn generate && yarn refresh-server:serve"]

  update-rankings:
    image: hackernews-clone_server
    restart: always
    depends_on:
      - api
    command: ["sh", "-c", "yarn generate && yarn update-rankings:serve"]

  db:
    image: postgres:12.0-alpine
    restart: always
    expose:
      - "5432"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?err} # error out if env variable not provided

volumes:
  static_files:
